/*
Holodex/HoloAPI V2

Holodex Public API. Successor to the HoloAPI v1

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package holodex

import (
	"encoding/json"
)

// ChannelMin struct for ChannelMin
type ChannelMin struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	EnglishName NullableString `json:"english_name,omitempty"`
	Type *string `json:"type,omitempty"`
	Photo *string `json:"photo,omitempty"`
}

// NewChannelMin instantiates a new ChannelMin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelMin() *ChannelMin {
	this := ChannelMin{}
	return &this
}

// NewChannelMinWithDefaults instantiates a new ChannelMin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelMinWithDefaults() *ChannelMin {
	this := ChannelMin{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ChannelMin) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelMin) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ChannelMin) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ChannelMin) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ChannelMin) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelMin) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ChannelMin) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ChannelMin) SetName(v string) {
	o.Name = &v
}

// GetEnglishName returns the EnglishName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChannelMin) GetEnglishName() string {
	if o == nil || o.EnglishName.Get() == nil {
		var ret string
		return ret
	}
	return *o.EnglishName.Get()
}

// GetEnglishNameOk returns a tuple with the EnglishName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChannelMin) GetEnglishNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnglishName.Get(), o.EnglishName.IsSet()
}

// HasEnglishName returns a boolean if a field has been set.
func (o *ChannelMin) HasEnglishName() bool {
	if o != nil && o.EnglishName.IsSet() {
		return true
	}

	return false
}

// SetEnglishName gets a reference to the given NullableString and assigns it to the EnglishName field.
func (o *ChannelMin) SetEnglishName(v string) {
	o.EnglishName.Set(&v)
}
// SetEnglishNameNil sets the value for EnglishName to be an explicit nil
func (o *ChannelMin) SetEnglishNameNil() {
	o.EnglishName.Set(nil)
}

// UnsetEnglishName ensures that no value is present for EnglishName, not even an explicit nil
func (o *ChannelMin) UnsetEnglishName() {
	o.EnglishName.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ChannelMin) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelMin) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ChannelMin) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ChannelMin) SetType(v string) {
	o.Type = &v
}

// GetPhoto returns the Photo field value if set, zero value otherwise.
func (o *ChannelMin) GetPhoto() string {
	if o == nil || o.Photo == nil {
		var ret string
		return ret
	}
	return *o.Photo
}

// GetPhotoOk returns a tuple with the Photo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelMin) GetPhotoOk() (*string, bool) {
	if o == nil || o.Photo == nil {
		return nil, false
	}
	return o.Photo, true
}

// HasPhoto returns a boolean if a field has been set.
func (o *ChannelMin) HasPhoto() bool {
	if o != nil && o.Photo != nil {
		return true
	}

	return false
}

// SetPhoto gets a reference to the given string and assigns it to the Photo field.
func (o *ChannelMin) SetPhoto(v string) {
	o.Photo = &v
}

func (o ChannelMin) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.EnglishName.IsSet() {
		toSerialize["english_name"] = o.EnglishName.Get()
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Photo != nil {
		toSerialize["photo"] = o.Photo
	}
	return json.Marshal(toSerialize)
}

type NullableChannelMin struct {
	value *ChannelMin
	isSet bool
}

func (v NullableChannelMin) Get() *ChannelMin {
	return v.value
}

func (v *NullableChannelMin) Set(val *ChannelMin) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelMin) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelMin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelMin(val *ChannelMin) *NullableChannelMin {
	return &NullableChannelMin{value: val, isSet: true}
}

func (v NullableChannelMin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelMin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


