/*
Holodex/HoloAPI V2

Holodex Public API. Successor to the HoloAPI v1

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package holodex

import (
	"encoding/json"
	"fmt"
)

// PostSearchVideoSearch200Response - struct for PostSearchVideoSearch200Response
type PostSearchVideoSearch200Response struct {
	PostSearchVideoSearch200ResponseOneOf *PostSearchVideoSearch200ResponseOneOf
	ArrayOfVideoWithChannel *[]VideoWithChannel
}

// PostSearchVideoSearch200ResponseOneOfAsPostSearchVideoSearch200Response is a convenience function that returns PostSearchVideoSearch200ResponseOneOf wrapped in PostSearchVideoSearch200Response
func PostSearchVideoSearch200ResponseOneOfAsPostSearchVideoSearch200Response(v *PostSearchVideoSearch200ResponseOneOf) PostSearchVideoSearch200Response {
	return PostSearchVideoSearch200Response{
		PostSearchVideoSearch200ResponseOneOf: v,
	}
}

// []VideoWithChannelAsPostSearchVideoSearch200Response is a convenience function that returns []VideoWithChannel wrapped in PostSearchVideoSearch200Response
func ArrayOfVideoWithChannelAsPostSearchVideoSearch200Response(v *[]VideoWithChannel) PostSearchVideoSearch200Response {
	return PostSearchVideoSearch200Response{
		ArrayOfVideoWithChannel: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PostSearchVideoSearch200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PostSearchVideoSearch200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.PostSearchVideoSearch200ResponseOneOf)
	if err == nil {
		jsonPostSearchVideoSearch200ResponseOneOf, _ := json.Marshal(dst.PostSearchVideoSearch200ResponseOneOf)
		if string(jsonPostSearchVideoSearch200ResponseOneOf) == "{}" { // empty struct
			dst.PostSearchVideoSearch200ResponseOneOf = nil
		} else {
			match++
		}
	} else {
		dst.PostSearchVideoSearch200ResponseOneOf = nil
	}

	// try to unmarshal data into ArrayOfVideoWithChannel
	err = newStrictDecoder(data).Decode(&dst.ArrayOfVideoWithChannel)
	if err == nil {
		jsonArrayOfVideoWithChannel, _ := json.Marshal(dst.ArrayOfVideoWithChannel)
		if string(jsonArrayOfVideoWithChannel) == "{}" { // empty struct
			dst.ArrayOfVideoWithChannel = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfVideoWithChannel = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PostSearchVideoSearch200ResponseOneOf = nil
		dst.ArrayOfVideoWithChannel = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(PostSearchVideoSearch200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(PostSearchVideoSearch200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PostSearchVideoSearch200Response) MarshalJSON() ([]byte, error) {
	if src.PostSearchVideoSearch200ResponseOneOf != nil {
		return json.Marshal(&src.PostSearchVideoSearch200ResponseOneOf)
	}

	if src.ArrayOfVideoWithChannel != nil {
		return json.Marshal(&src.ArrayOfVideoWithChannel)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PostSearchVideoSearch200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PostSearchVideoSearch200ResponseOneOf != nil {
		return obj.PostSearchVideoSearch200ResponseOneOf
	}

	if obj.ArrayOfVideoWithChannel != nil {
		return obj.ArrayOfVideoWithChannel
	}

	// all schemas are nil
	return nil
}

type NullablePostSearchVideoSearch200Response struct {
	value *PostSearchVideoSearch200Response
	isSet bool
}

func (v NullablePostSearchVideoSearch200Response) Get() *PostSearchVideoSearch200Response {
	return v.value
}

func (v *NullablePostSearchVideoSearch200Response) Set(val *PostSearchVideoSearch200Response) {
	v.value = val
	v.isSet = true
}

func (v NullablePostSearchVideoSearch200Response) IsSet() bool {
	return v.isSet
}

func (v *NullablePostSearchVideoSearch200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostSearchVideoSearch200Response(val *PostSearchVideoSearch200Response) *NullablePostSearchVideoSearch200Response {
	return &NullablePostSearchVideoSearch200Response{value: val, isSet: true}
}

func (v NullablePostSearchVideoSearch200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostSearchVideoSearch200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


