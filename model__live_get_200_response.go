/*
Holodex/HoloAPI V2

Holodex Public API. Successor to the HoloAPI v1

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package holodex

import (
	"encoding/json"
	"fmt"
)

// LiveGet200Response - struct for LiveGet200Response
type LiveGet200Response struct {
	LiveGet200ResponseOneOf *LiveGet200ResponseOneOf
	ArrayOfVideo *[]Video
}

// LiveGet200ResponseOneOfAsLiveGet200Response is a convenience function that returns LiveGet200ResponseOneOf wrapped in LiveGet200Response
func LiveGet200ResponseOneOfAsLiveGet200Response(v *LiveGet200ResponseOneOf) LiveGet200Response {
	return LiveGet200Response{
		LiveGet200ResponseOneOf: v,
	}
}

// []VideoAsLiveGet200Response is a convenience function that returns []Video wrapped in LiveGet200Response
func ArrayOfVideoAsLiveGet200Response(v *[]Video) LiveGet200Response {
	return LiveGet200Response{
		ArrayOfVideo: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *LiveGet200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LiveGet200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.LiveGet200ResponseOneOf)
	if err == nil {
		jsonLiveGet200ResponseOneOf, _ := json.Marshal(dst.LiveGet200ResponseOneOf)
		if string(jsonLiveGet200ResponseOneOf) == "{}" { // empty struct
			dst.LiveGet200ResponseOneOf = nil
		} else {
			match++
		}
	} else {
		dst.LiveGet200ResponseOneOf = nil
	}

	// try to unmarshal data into ArrayOfVideo
	err = newStrictDecoder(data).Decode(&dst.ArrayOfVideo)
	if err == nil {
		jsonArrayOfVideo, _ := json.Marshal(dst.ArrayOfVideo)
		if string(jsonArrayOfVideo) == "{}" { // empty struct
			dst.ArrayOfVideo = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfVideo = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LiveGet200ResponseOneOf = nil
		dst.ArrayOfVideo = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(LiveGet200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(LiveGet200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src LiveGet200Response) MarshalJSON() ([]byte, error) {
	if src.LiveGet200ResponseOneOf != nil {
		return json.Marshal(&src.LiveGet200ResponseOneOf)
	}

	if src.ArrayOfVideo != nil {
		return json.Marshal(&src.ArrayOfVideo)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *LiveGet200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.LiveGet200ResponseOneOf != nil {
		return obj.LiveGet200ResponseOneOf
	}

	if obj.ArrayOfVideo != nil {
		return obj.ArrayOfVideo
	}

	// all schemas are nil
	return nil
}

type NullableLiveGet200Response struct {
	value *LiveGet200Response
	isSet bool
}

func (v NullableLiveGet200Response) Get() *LiveGet200Response {
	return v.value
}

func (v *NullableLiveGet200Response) Set(val *LiveGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableLiveGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableLiveGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLiveGet200Response(val *LiveGet200Response) *NullableLiveGet200Response {
	return &NullableLiveGet200Response{value: val, isSet: true}
}

func (v NullableLiveGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLiveGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


