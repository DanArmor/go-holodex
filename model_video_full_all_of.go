/*
Holodex/HoloAPI V2

Holodex Public API. Successor to the HoloAPI v1

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package holodex

import (
	"encoding/json"
)

// VideoFullAllOf struct for VideoFullAllOf
type VideoFullAllOf struct {
	// Included when 'includes' contains 'clips'
	Clips []VideoWithChannel `json:"clips,omitempty"`
	// Included when 'includes' contains 'sources'
	Sources []VideoWithChannel `json:"sources,omitempty"`
	// Included when 'includes' contains 'refers'
	Refers []VideoWithChannel `json:"refers,omitempty"`
	// Included when 'includes' contains 'simulcasts'
	Simulcasts []VideoWithChannel `json:"simulcasts,omitempty"`
	// VTubers mentioned by this video, Included when 'includes' contains 'mentions'
	Mentions []ChannelMin `json:"mentions,omitempty"`
	// Number of songs
	Songs NullableFloat32 `json:"songs,omitempty"`
}

// NewVideoFullAllOf instantiates a new VideoFullAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVideoFullAllOf() *VideoFullAllOf {
	this := VideoFullAllOf{}
	return &this
}

// NewVideoFullAllOfWithDefaults instantiates a new VideoFullAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVideoFullAllOfWithDefaults() *VideoFullAllOf {
	this := VideoFullAllOf{}
	return &this
}

// GetClips returns the Clips field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VideoFullAllOf) GetClips() []VideoWithChannel {
	if o == nil {
		var ret []VideoWithChannel
		return ret
	}
	return o.Clips
}

// GetClipsOk returns a tuple with the Clips field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VideoFullAllOf) GetClipsOk() ([]VideoWithChannel, bool) {
	if o == nil || o.Clips == nil {
		return nil, false
	}
	return o.Clips, true
}

// HasClips returns a boolean if a field has been set.
func (o *VideoFullAllOf) HasClips() bool {
	if o != nil && o.Clips != nil {
		return true
	}

	return false
}

// SetClips gets a reference to the given []VideoWithChannel and assigns it to the Clips field.
func (o *VideoFullAllOf) SetClips(v []VideoWithChannel) {
	o.Clips = v
}

// GetSources returns the Sources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VideoFullAllOf) GetSources() []VideoWithChannel {
	if o == nil {
		var ret []VideoWithChannel
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VideoFullAllOf) GetSourcesOk() ([]VideoWithChannel, bool) {
	if o == nil || o.Sources == nil {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *VideoFullAllOf) HasSources() bool {
	if o != nil && o.Sources != nil {
		return true
	}

	return false
}

// SetSources gets a reference to the given []VideoWithChannel and assigns it to the Sources field.
func (o *VideoFullAllOf) SetSources(v []VideoWithChannel) {
	o.Sources = v
}

// GetRefers returns the Refers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VideoFullAllOf) GetRefers() []VideoWithChannel {
	if o == nil {
		var ret []VideoWithChannel
		return ret
	}
	return o.Refers
}

// GetRefersOk returns a tuple with the Refers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VideoFullAllOf) GetRefersOk() ([]VideoWithChannel, bool) {
	if o == nil || o.Refers == nil {
		return nil, false
	}
	return o.Refers, true
}

// HasRefers returns a boolean if a field has been set.
func (o *VideoFullAllOf) HasRefers() bool {
	if o != nil && o.Refers != nil {
		return true
	}

	return false
}

// SetRefers gets a reference to the given []VideoWithChannel and assigns it to the Refers field.
func (o *VideoFullAllOf) SetRefers(v []VideoWithChannel) {
	o.Refers = v
}

// GetSimulcasts returns the Simulcasts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VideoFullAllOf) GetSimulcasts() []VideoWithChannel {
	if o == nil {
		var ret []VideoWithChannel
		return ret
	}
	return o.Simulcasts
}

// GetSimulcastsOk returns a tuple with the Simulcasts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VideoFullAllOf) GetSimulcastsOk() ([]VideoWithChannel, bool) {
	if o == nil || o.Simulcasts == nil {
		return nil, false
	}
	return o.Simulcasts, true
}

// HasSimulcasts returns a boolean if a field has been set.
func (o *VideoFullAllOf) HasSimulcasts() bool {
	if o != nil && o.Simulcasts != nil {
		return true
	}

	return false
}

// SetSimulcasts gets a reference to the given []VideoWithChannel and assigns it to the Simulcasts field.
func (o *VideoFullAllOf) SetSimulcasts(v []VideoWithChannel) {
	o.Simulcasts = v
}

// GetMentions returns the Mentions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VideoFullAllOf) GetMentions() []ChannelMin {
	if o == nil {
		var ret []ChannelMin
		return ret
	}
	return o.Mentions
}

// GetMentionsOk returns a tuple with the Mentions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VideoFullAllOf) GetMentionsOk() ([]ChannelMin, bool) {
	if o == nil || o.Mentions == nil {
		return nil, false
	}
	return o.Mentions, true
}

// HasMentions returns a boolean if a field has been set.
func (o *VideoFullAllOf) HasMentions() bool {
	if o != nil && o.Mentions != nil {
		return true
	}

	return false
}

// SetMentions gets a reference to the given []ChannelMin and assigns it to the Mentions field.
func (o *VideoFullAllOf) SetMentions(v []ChannelMin) {
	o.Mentions = v
}

// GetSongs returns the Songs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VideoFullAllOf) GetSongs() float32 {
	if o == nil || o.Songs.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Songs.Get()
}

// GetSongsOk returns a tuple with the Songs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VideoFullAllOf) GetSongsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Songs.Get(), o.Songs.IsSet()
}

// HasSongs returns a boolean if a field has been set.
func (o *VideoFullAllOf) HasSongs() bool {
	if o != nil && o.Songs.IsSet() {
		return true
	}

	return false
}

// SetSongs gets a reference to the given NullableFloat32 and assigns it to the Songs field.
func (o *VideoFullAllOf) SetSongs(v float32) {
	o.Songs.Set(&v)
}
// SetSongsNil sets the value for Songs to be an explicit nil
func (o *VideoFullAllOf) SetSongsNil() {
	o.Songs.Set(nil)
}

// UnsetSongs ensures that no value is present for Songs, not even an explicit nil
func (o *VideoFullAllOf) UnsetSongs() {
	o.Songs.Unset()
}

func (o VideoFullAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Clips != nil {
		toSerialize["clips"] = o.Clips
	}
	if o.Sources != nil {
		toSerialize["sources"] = o.Sources
	}
	if o.Refers != nil {
		toSerialize["refers"] = o.Refers
	}
	if o.Simulcasts != nil {
		toSerialize["simulcasts"] = o.Simulcasts
	}
	if o.Mentions != nil {
		toSerialize["mentions"] = o.Mentions
	}
	if o.Songs.IsSet() {
		toSerialize["songs"] = o.Songs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVideoFullAllOf struct {
	value *VideoFullAllOf
	isSet bool
}

func (v NullableVideoFullAllOf) Get() *VideoFullAllOf {
	return v.value
}

func (v *NullableVideoFullAllOf) Set(val *VideoFullAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableVideoFullAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableVideoFullAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVideoFullAllOf(val *VideoFullAllOf) *NullableVideoFullAllOf {
	return &NullableVideoFullAllOf{value: val, isSet: true}
}

func (v NullableVideoFullAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVideoFullAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


