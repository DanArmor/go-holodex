/*
Holodex/HoloAPI V2

Holodex Public API. Successor to the HoloAPI v1

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package holodex

import (
	"encoding/json"
)

// Comment struct for Comment
type Comment struct {
	CommentKey *string `json:"comment_key,omitempty"`
	VideoId *string `json:"video_id,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NewComment instantiates a new Comment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComment() *Comment {
	this := Comment{}
	return &this
}

// NewCommentWithDefaults instantiates a new Comment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentWithDefaults() *Comment {
	this := Comment{}
	return &this
}

// GetCommentKey returns the CommentKey field value if set, zero value otherwise.
func (o *Comment) GetCommentKey() string {
	if o == nil || o.CommentKey == nil {
		var ret string
		return ret
	}
	return *o.CommentKey
}

// GetCommentKeyOk returns a tuple with the CommentKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetCommentKeyOk() (*string, bool) {
	if o == nil || o.CommentKey == nil {
		return nil, false
	}
	return o.CommentKey, true
}

// HasCommentKey returns a boolean if a field has been set.
func (o *Comment) HasCommentKey() bool {
	if o != nil && o.CommentKey != nil {
		return true
	}

	return false
}

// SetCommentKey gets a reference to the given string and assigns it to the CommentKey field.
func (o *Comment) SetCommentKey(v string) {
	o.CommentKey = &v
}

// GetVideoId returns the VideoId field value if set, zero value otherwise.
func (o *Comment) GetVideoId() string {
	if o == nil || o.VideoId == nil {
		var ret string
		return ret
	}
	return *o.VideoId
}

// GetVideoIdOk returns a tuple with the VideoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetVideoIdOk() (*string, bool) {
	if o == nil || o.VideoId == nil {
		return nil, false
	}
	return o.VideoId, true
}

// HasVideoId returns a boolean if a field has been set.
func (o *Comment) HasVideoId() bool {
	if o != nil && o.VideoId != nil {
		return true
	}

	return false
}

// SetVideoId gets a reference to the given string and assigns it to the VideoId field.
func (o *Comment) SetVideoId(v string) {
	o.VideoId = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Comment) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Comment) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *Comment) SetMessage(v string) {
	o.Message = &v
}

func (o Comment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CommentKey != nil {
		toSerialize["comment_key"] = o.CommentKey
	}
	if o.VideoId != nil {
		toSerialize["video_id"] = o.VideoId
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableComment struct {
	value *Comment
	isSet bool
}

func (v NullableComment) Get() *Comment {
	return v.value
}

func (v *NullableComment) Set(val *Comment) {
	v.value = val
	v.isSet = true
}

func (v NullableComment) IsSet() bool {
	return v.isSet
}

func (v *NullableComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComment(val *Comment) *NullableComment {
	return &NullableComment{value: val, isSet: true}
}

func (v NullableComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


